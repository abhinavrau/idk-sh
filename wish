#!/usr/bin/env bash
# This script was generated by bashly 1.1.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  #inspect_args

  querystring=${other_args[*]}

  # Read stdin if querystring not provided as arguments
  if [[ -z "$querystring" ]]; then
    querystring="$(cat -)"
  fi

  # Find the shell we are in
  shell=$(ps -p "$(ps -p $$ -o ppid=)" -o comm=)

  # Get the Linux distro name

  if [ -f /etc/os-release ]; then
      PRETTY_NAME=$(grep -oP 'PRETTY_NAME="\K[^"]+' /etc/os-release)
      os="${PRETTY_NAME}"
  else
      os=$(uname -o)
      if [ "$os" = "Darwin" ]; then
          os="macOS"
      fi
  fi

  # Get the processor architecture
  arch=$(uname -m)

  prompt="You are an interactive shell command line shell agent. You just get things done, rather than trying to explain. Do your best to respond with 1 command that will meet the requirements. All other output is just echoed. Favor 1 line shell commands. Be terse. Important: Every command you output will automatically be executed in this "
  env_string="{ \'shell\': \'${shell}\',\'operation-system\': \'${os}\',\'architecture\': \'${arch}\' }"
  full_payload=$prompt$env_string". Question: "$querystring
  #full_payload="You are an interactive shell command line shell agent. You just get things done, rather than trying to explain. Do your best to respond with 1 command that will meet the requirements. All other output is just echoed. Favor 1 line shell commands. Be terse. Important: Every command you output will automatically be executed in this ${env_string}. Question: ${querystring}"
  jsonPayload="

  {
          \"instances\": [
              {
                  \"prefix\": \"${full_payload}\"
              }
          ],
          \"parameters\": {
              \"candidateCount\": 1,
              \"maxOutputTokens\": 1024,
              \"temperature\": 0.2
          }
  }"

  LOCATION_ID="us-central1"
  API_ENDPOINT="${LOCATION_ID}-aiplatform.googleapis.com"
  PROJECT_ID="argolis-arau"
  MODEL_ID="code-bison"

  output=$(curl \
  -s \
  -X POST \
  -H "Authorization: Bearer $(gcloud auth print-access-token)" \
  -H "Content-Type: application/json" \
  "https://${API_ENDPOINT}/v1/projects/${PROJECT_ID}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}:predict" -d "$jsonPayload" | jq .predictions[0].content)

  command=$(echo "$output" | sed 's/"//g')
  echo "$command"

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
wish_usage() {
  if [[ -n $long_usage ]]; then
    printf "wish - Shell command generator using on Natural Language Input using Google's code-bison model\n"
    echo

  else
    printf "wish - Shell command generator using on Natural Language Input using Google's code-bison model\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  wish [QUERY...]\n"
  printf "  wish --help | -h\n"
  printf "  wish --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    echo "  QUERY..."
    printf "    natural language query to build the shell command\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "PROJECT_ID (required)"
    printf "    GCP Project where  codey API is enabled and available\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "LOCATION_ID (required)"
    printf "    GCP Region to use for the  codey API\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        wish_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  if [[ -z "${PROJECT_ID:-}" ]]; then
    printf "missing required environment variable: PROJECT_ID\n" >&2
    exit 1
  fi
  if [[ -z "${LOCATION_ID:-}" ]]; then
    printf "missing required environment variable: LOCATION_ID\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --)
        shift
        other_args+=("$@")
        break
        ;;

      -?*)
        other_args+=("$1")
        shift
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_catch_all
        other_args+=("$1")
        shift

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
